{"version":3,"sources":["resource/cool/merlin.jpg","resource/cool/percival.jpg","resource/cool/servant.jpg","resource/cool/assassin.jpg","resource/cool/mordred.jpg","resource/cool/morgana.jpg","resource/cool/minion.jpg","resource/cool/oberon.jpg","actions/characters.js","service/utils.js","reducers/characters.js","actions/players.js","reducers/players.js","service/page-service.js","reducers/page.js","reducers/index.js","actions/page.js","components/playerSetup/playerSetup.js","components/characterSetup/characterSetup.js","components/assignCharacters/assignCharacters.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","characterActions","increment","decrement","reset","shuffle","array","j","x","i","length","Math","floor","random","initialState","characterList","merlin","maxCount","count","order","percival","servant","mordred","morgana","assassin","oberon","minion","selectedCount","assignableList","reducer","state","arguments","undefined","action","currentCount","type","actions","characterName","Object","objectSpread","defineProperty","newList","keys","forEach","name","Array","fill","push","add","delete","clear","setRole","playerList","role","concat","toConsumableArray","player","good","slice","index","map","pageMap","playerSetup","characters","assignCharacters","evilRoles","current","page","combineReducers","players","change","PlayerSetup","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputEnter","event","key","addPlayer","input","value","props","dispatch","playerActions","preventDefault","startGame","pageActions","clearPlayers","React","createRef","react_default","a","createElement","className","ref","onKeyDown","onClick","_ref","Component","connect","CharacterSetup","increaseCharacter","decreaseCharacter","resetCharacter","_callee","regenerator_default","wrap","_context","prev","next","console","log","stop","isGoodEvilBalanced","filter","_this2","sort","b","displayName","toUpperCase","classNames","evil","disabled","AssignCharacters","onViewClick","observableNamesArray","currentPlayerIndex","indexOf","setState","extraInfo","observableNames","join","reminder","viewMode","onConfirmClick","imageMap","require","src","alt","App","backToHome","currentPage","playerSetup_playerSetup","characterSetup_characterSetup","assignCharacters_assignCharacters","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5961487e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/merlin.d9a34f22.jpg\";","module.exports = __webpack_public_path__ + \"static/media/percival.9987db5b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/servant.73d1b559.jpg\";","module.exports = __webpack_public_path__ + \"static/media/assassin.e7fdef50.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mordred.017624c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/morgana.cbfd7398.jpg\";","module.exports = __webpack_public_path__ + \"static/media/minion.d8ec044c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/oberon.3b87a760.jpg\";","const characterActions = {\n    increment: 'CHARACTER_INCREMENT',\n    decrement: 'CHARACTER_DECREMENT',\n    reset: 'CHARACTER_RESET',\n    shuffle: 'CHARACTER_SHUFFLE'\n}\n\nexport default characterActions;","// Fisher–Yates shuffle algorithm\nexport function shuffle(array) {\n    let j, x, i;\n    for (i = array.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = array[i];\n        array[i] = array[j];\n        array[j] = x;\n    }\n    return array;\n}","import actions from '../actions/characters';\nimport { shuffle } from '../service/utils';\n\nconst initialState = {\n    characterList: {\n        merlin: {\n            maxCount: 1,\n            count: 1,\n            order: 0\n        },\n        percival: {\n            maxCount: 1,\n            count: 1,\n            order: 1\n        },\n        servant: {\n            maxCount: 5,\n            count: 1,\n            order: 2\n        },\n        mordred: {\n            maxCount: 1,\n            count: 1,\n            order: 3\n        },\n        morgana: {\n            maxCount: 1,\n            count: 1,\n            order: 4\n        },\n        assassin: {\n            maxCount: 1,\n            count: 0,\n            order: 5\n        },\n        oberon: {\n            maxCount: 1,\n            count: 0,\n            order: 6\n        },\n        minion: {\n            maxCount: 3,\n            count: 0,\n            order: 7\n        }\n    },\n    selectedCount: 5,\n    assignableList: []\n}\n\n// action = {\n//     type,\n//     characterName\n// }\nconst reducer = (state = initialState, action) => {\n    let currentCount = 0;\n    let maxCount = 0;\n    switch (action.type) {\n        case actions.increment:\n            currentCount = state.characterList[action.characterName].count;\n            maxCount = state.characterList[action.characterName].maxCount;\n            return {\n                ...state,\n                characterList: {\n                    ...state.characterList,\n                    [action.characterName]: {\n                        ...state.characterList[action.characterName],\n                        count: maxCount > currentCount ? currentCount + 1 : currentCount\n                    }\n                },\n                selectedCount: maxCount > currentCount ? state.selectedCount + 1 : state.selectedCount\n            }\n        case actions.decrement:\n            currentCount = state.characterList[action.characterName].count;\n            maxCount = state.characterList[action.characterName].maxCount;\n            return {\n                ...state,\n                characterList: {\n                    ...state.characterList,\n                    [action.characterName]: {\n                        ...state.characterList[action.characterName],\n                        count: currentCount > 0 ? currentCount - 1 : currentCount\n                    }\n                },\n                selectedCount: currentCount > 0 ? state.selectedCount - 1 : state.selectedCount\n            }\n        case actions.shuffle: // generate a shuffled list of characters to assign, and this list will be fixed during the game\n            let newList = [];\n            Object.keys(state.characterList).forEach(name => {\n                if (state.characterList[name].count) {\n                    Array(state.characterList[name].count).fill().forEach(() =>{\n                        newList.push(name)\n                    });\n                }\n            });\n            return {\n                ...state,\n                assignableList: shuffle(newList)\n            }\n        case actions.reset:\n            return { ...initialState };    \n        default:\n            return state; \n    }\n}\n\nexport default reducer;","const actions = {\n    add: 'PLAYER_ADD',\n    delete: 'PLAYER_DELETE',\n    clear: 'PLAYER_CLEAR',\n    setRole: 'PLAYER_SET_ROLE'\n}\n\nexport default actions;","import actions from '../actions/players';\n\nconst initialState = {\n    // playerList: []\n    playerList: [\n        {name: 'Alice', role: null},\n        {name: 'Bob', role: null},\n        {name: 'Cathy', role: null},\n        {name: 'Dickson', role: null},\n        {name: 'Evelyn', role: null},\n    ]\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actions.add:\n            return {\n                ...state,\n                playerList: [...state.playerList, {name: action.player, good: null}]\n            };\n        case actions.delete:\n            return {\n                ...state,\n                playerList: state.playerList.slice(action.index, 1)\n            };\n        case actions.clear:\n            return {\n                ...state,\n                playerList: []\n            };\n        case actions.setRole:\n            return {\n                ...state,\n                playerList: state.playerList.map((player, i) => ({\n                    ...player,\n                    role: action.assignableList[i]\n                }))\n            }\n        default:\n            return state; \n    }\n}\n\nexport default reducer;","export const pageMap = {\n    playerSetup: 'playerSetup',\n    characters: 'characters',\n    assignCharacters: 'assignCharacters'\n}\n\nexport const evilRoles = ['mordred', 'morgana', 'oberon', 'assassin', 'minion'];","import { pageMap } from '../service/page-service';\n\nconst initialState = {\n    // current: pageMap.playerSetup\n    // current: pageMap.characters\n    current: pageMap.assignCharacters\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'CHANGE_PAGE':\n            if (action.page in pageMap) {\n                return {\n                    ...state,\n                    current: pageMap[action.page]\n                };\n            } else return state;\n        default:\n            return state; \n    }\n}\n\nexport default reducer;","import { combineReducers } from 'redux';\nimport characters from './characters';\nimport players from './players';\nimport page from './page';\n\nexport default combineReducers({\n    characters,\n    players,\n    page\n})","const actions = {\n    change: 'CHANGE_PAGE'\n}\n\nexport default actions;","import React from 'react';\nimport { connect } from 'react-redux';\nimport './playerSetup.scss';\nimport { pageMap } from '../../service/page-service';\nimport playerActions from '../../actions/players';\nimport pageActions from '../../actions/page';\n\nclass PlayerSetup extends React.Component {\n    constructor() {\n        super();\n        this.input = React.createRef();\n    }\n\n    handleInputEnter = (event) => {\n        if (event.key === 'Enter') {\n            this.addPlayer(event);\n        }\n    }\n\n    addPlayer = (event) => {\n        if (this.input && this.input.current && this.input.current.value !== '') {\n            this.props.dispatch({type: playerActions.add, player: this.input.current.value});\n            this.input.current.value = '';\n        }\n        event.preventDefault();\n    }\n\n    startGame = () => {\n        this.props.dispatch({type: pageActions.change, page: pageMap.characters});\n    }\n    clearPlayers = () => {\n        this.props.dispatch({type: playerActions.clear});\n    }\n    \n    render() {\n        return (\n            <div className=\"player-setup\">\n                <div className=\"title\">Please add players</div>\n                <div>\n                    <input type=\"text\" ref={this.input} onKeyDown={this.handleInputEnter}/>\n                    <button className=\"btn common add-player\" onClick={this.addPlayer}>Add player</button>\n                </div>\n                <div className=\"name-section\">{this.props.playerList.map(({name}, i) => \n                    <div className=\"name-item\" key={i}>{`${i+1}. ${name}`}</div>\n                )}</div>\n                <div className=\"button-section\">\n                    { this.props.playerList.length > 0 && \n                        <button className=\"btn clear\" onClick={this.clearPlayers}>Clear</button>\n                    }\n                    { this.props.playerList.length >= 5 && \n                        <button className=\"btn common start-game\" onClick={this.startGame}>Let's Go</button>\n                    }\n                </div>\n                \n                { this.props.playerList.length < 5 && \n                    <div className=\"warning\">You need at least five players</div>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList\n    }\n};\n\nexport default connect(mapStateToProps)(PlayerSetup);","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport './characterSetup.scss';\nimport { pageMap } from '../../service/page-service';\nimport characterActions from '../../actions/characters';\nimport pageActions from '../../actions/page';\nimport playerActions from '../../actions/players';\n\nclass CharacterSetup extends React.Component {\n    increaseCharacter = (name) => {\n        this.props.dispatch({type: characterActions.increment, characterName: name});\n    }\n\n    decreaseCharacter = (name) => {\n        this.props.dispatch({type: characterActions.decrement, characterName: name});\n    }\n\n    resetCharacter = () => {\n        this.props.dispatch({type: characterActions.reset});\n    }\n\n    startGame = async () => {\n        await this.props.dispatch({type: characterActions.shuffle});\n        console.log(this.props.assignableList);\n        await this.props.dispatch({type: playerActions.setRole, assignableList: this.props.assignableList});\n        console.log(this.props.playerList);\n        this.props.dispatch({type: pageActions.change, page: pageMap.assignCharacters});\n    }\n\n    isGoodEvilBalanced = () => {\n        return (Object.keys(this.props.characterList).filter(name => this.props.characterList[name].order > 2 && this.props.characterList[name].count > 0).length > 0)\n        && (Object.keys(this.props.characterList).filter(name => this.props.characterList[name].order <= 2 && this.props.characterList[name].count > 0).length > 0);\n    }\n\n    render() {\n        return (\n            <div className=\"character-setup\">\n                <div className=\"character-list\">{Object.keys(this.props.characterList)\n                    .sort((a, b) => this.props.characterList[a].order - this.props.characterList[b].order)\n                    .map((name, i) => {\n                    let displayName = name.toUpperCase();\n                    return (\n                        <div className=\"character-line\" key={i}>\n                            <div className={classNames(\"character-name\", {'evil': this.props.characterList[name].order > 2})}>{displayName}</div>\n                            <div className=\"control-section\">\n                                <button className=\"btn common minus\"\n                                disabled={this.props.characterList[name].count <= 0}\n                                onClick={() => this.decreaseCharacter(name)}\n                                >-</button>\n                                <div className=\"count\">{this.props.characterList[name].count}</div>\n                                <button className=\"btn common plus\" \n                                disabled={(this.props.characterList[name].count >= this.props.characterList[name].maxCount) || this.props.playerList.length === this.props.selectedCount}\n                                onClick={() => this.increaseCharacter(name)}\n                                >+</button>\n                            </div>\n                        </div>\n                    );\n                })}</div>\n                <div className=\"message-to-user\">\n                    { this.props.playerList.length - this.props.selectedCount > 0 &&\n                        <div className=\"message-line warning\">\n                            <i className=\"far fa-hand-point-right\"></i>\n                            <div>{`${this.props.playerList.length - this.props.selectedCount} left to be added`}</div>\n                        </div>\n                    }\n                    { !this.isGoodEvilBalanced() &&\n                        <div className=\"message-line warning\">\n                            <i className=\"far fa-hand-point-right\"></i>\n                            <div>Must have at least 1 player in each team</div>\n                        </div>\n                    }\n                    { this.props.playerList.length === this.props.selectedCount && this.isGoodEvilBalanced() &&\n                        <div className=\"message-line all-set\">\n                            <i className=\"fas fa-check\"></i>\n                            <div>All set</div>\n                        </div>\n                    }\n                </div>\n                <div className=\"final-button-section\">\n                    <button className=\"btn clear\" onClick={this.resetCharacter}>Reset</button>\n                    <button className=\"btn common\" onClick={this.startGame} disabled={this.props.playerList.length > this.props.selectedCount}>Start</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList,\n        characterList: state.characters.characterList,\n        selectedCount: state.characters.selectedCount,\n        assignableList: state.characters.assignableList\n    }\n};\n\nexport default connect(mapStateToProps)(CharacterSetup);","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport './assignCharacters.scss';\nimport { pageMap, evilRoles } from '../../service/page-service';\nimport pageActions from '../../actions/page';\n\nclass AssignCharacters extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPlayerIndex: 0,\n            viewMode: 'preview', // preview, viewing\n            extraInfo: '',\n            observableNames: '',\n            reminder: ''\n        }\n        this.imageMap = {\n            merlin: require('../../resource/cool/merlin.jpg'),\n            percival: require('../../resource/cool/percival.jpg'),\n            servant: require('../../resource/cool/servant.jpg'),\n            assassin: require('../../resource/cool/assassin.jpg'),\n            mordred: require('../../resource/cool/mordred.jpg'),\n            morgana: require('../../resource/cool/morgana.jpg'),\n            minion: require('../../resource/cool/minion.jpg'),\n            oberon: require('../../resource/cool/oberon.jpg')\n        }\n    }\n\n    onViewClick = () => {\n        let observableNamesArray = []\n        switch (this.props.playerList[this.state.currentPlayerIndex].role) {\n            case 'merlin':\n                observableNamesArray = this.props.playerList\n                    .filter(player => evilRoles.filter(role => role !== 'mordred').indexOf(player.role) >= 0)\n                    .map(player => player.name);\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >= 2 ? 'People holding evil roles are' : \n                        observableNamesArray.length === 1 ? 'Person holding evil role is' : \"You can't see anyone\",\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: this.props.playerList.filter(player => player.role === 'mordred').length > 0 ?\n                        'Mordred is hiding!' : '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'percival':\n                observableNamesArray = this.props.playerList\n                    .filter(player => ['morgana', 'merlin'].indexOf(player.role) >= 0)\n                    .map(player => player.name);\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >= 2 ? 'Possible Merlins are' : \n                        observableNamesArray.length === 1 ? 'Merlin is possibly' : \"You can't see anyone\",\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'mordred':\n                observableNamesArray = this.props.playerList\n                    .filter(player => evilRoles.indexOf(player.role) >= 0)\n                    .filter(player => player.name !== this.props.playerList[this.state.currentPlayerIndex].name)\n                    .map(player => player.name)\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >=2 ? 'Your teammates are' :\n                        observableNamesArray.length === 1 ? 'Your teammate is' : 'Your are the only one in your team',\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: this.props.playerList.filter(player => player.role === 'oberon').length > 0 ?\n                        'Oberon is hiding!' : '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'morgana':\n                observableNamesArray = this.props.playerList\n                    .filter(player => evilRoles.indexOf(player.role) >= 0)\n                    .filter(player => player.name !== this.props.playerList[this.state.currentPlayerIndex].name)\n                    .map(player => player.name)\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >=2 ? 'Your teammates are' :\n                        observableNamesArray.length === 1 ? 'Your teammate is' : 'Your are the only one in your team',\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: this.props.playerList.filter(player => player.role === 'oberon').length > 0 ?\n                        'Oberon is hiding!' : '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'assassin':\n                observableNamesArray = this.props.playerList\n                    .filter(player => evilRoles.indexOf(player.role) >= 0)\n                    .filter(player => player.name !== this.props.playerList[this.state.currentPlayerIndex].name)\n                    .map(player => player.name)\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >=2 ? 'Your teammates are' :\n                        observableNamesArray.length === 1 ? 'Your teammate is' : 'Your are the only one in your team',\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: this.props.playerList.filter(player => player.role === 'oberon').length > 0 ?\n                        'Oberon is hiding!' : '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'minion':\n                observableNamesArray = this.props.playerList\n                    .filter(player => evilRoles.indexOf(player.role) >= 0)\n                    .filter(player => player.name !== this.props.playerList[this.state.currentPlayerIndex].name)\n                    .map(player => player.name)\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >=2 ? 'Your teammates are' :\n                        observableNamesArray.length === 1 ? 'Your teammate is' : 'Your are the only one in your team',\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: this.props.playerList.filter(player => player.role === 'oberon').length > 0 ?\n                        'Oberon is hiding!' : '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'oberon':\n                this.setState({\n                    ...this.state,\n                    extraInfo: '',\n                    observableNames: '',\n                    reminder: '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'servant':\n                this.setState({\n                    ...this.state,\n                    extraInfo: '',\n                    observableNames: '',\n                    reminder: '',\n                    viewMode: 'viewing',\n                });\n                break;\n            default:\n                return;\n        }\n    }\n\n    onConfirmClick = () => {\n        if (this.state.currentPlayerIndex === this.props.playerList.length - 1) return;\n        this.setState({\n            ...this.state,\n            currentPlayerIndex: this.state.currentPlayerIndex + 1,\n            viewMode: 'preview'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"assign-characters\">\n                <div className=\"player-name\">{this.props.playerList[this.state.currentPlayerIndex].name}</div>\n                { this.state.viewMode === 'preview' && \n                    <div className=\"interaction-block preview-role\">\n                        <div className=\"message\">Click the button below to view your role</div>\n                        <button className=\"btn common\" onClick={this.onViewClick}>View</button>\n                    </div>\n                }\n                { this.state.viewMode === 'viewing' && \n                    <div className=\"interaction-block viewing\">\n                        <div className=\"message\">You are</div>\n                        <div className={classNames(\"role\", \n                            {'evil': ['mordred', 'morgana', 'oberon', 'assassin', 'minion'].indexOf(this.props.playerList[this.state.currentPlayerIndex].role) >= 0})}>\n                            {this.props.playerList[this.state.currentPlayerIndex].role.toUpperCase()}</div>\n                        <img src={this.imageMap[this.props.playerList[this.state.currentPlayerIndex].role]} alt={this.props.playerList[this.state.currentPlayerIndex].role + 'image'}></img>\n                        {this.state.extraInfo && <div className=\"extra-info\">{this.state.extraInfo}</div>}\n                        {this.state.observableNames && <div className=\"name-list\">{this.state.observableNames}</div>}\n                        {this.state.reminder && \n                            <div className=\"warning\">\n                                <i className=\"far fa-hand-point-right\"></i>\n                                <div>{this.state.reminder}</div>\n                            </div>\n                        }\n                        <button className=\"btn common\" onClick={this.onConfirmClick}>Got it</button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList\n    }\n};\n\nexport default connect(mapStateToProps)(AssignCharacters);","import React from 'react';\nimport { connect } from 'react-redux';\nimport pageActions from '../../actions/page';\nimport PlayerSetup from '../playerSetup/playerSetup';\nimport CharacterSetup from '../characterSetup/characterSetup';\nimport AssignCharacter from '../assignCharacters/assignCharacters';\nimport { pageMap } from '../../service/page-service';\nimport './App.scss';\n\nclass App extends React.Component {\n  backToHome = () => {\n    this.props.dispatch({type: pageActions.change, page: pageMap.playerSetup});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"title-section\">\n          <div className=\"title app-title\">Avalon</div>\n          {this.props.currentPage !== pageMap.playerSetup && <i className=\"fas fa-home\" onClick={this.backToHome}></i>}\n        </div>\n        <div className=\"page-content\">\n          {this.props.currentPage === pageMap.playerSetup && <PlayerSetup></PlayerSetup>}\n          {this.props.currentPage === pageMap.characters && <CharacterSetup></CharacterSetup>}\n          {this.props.currentPage === pageMap.assignCharacters && <AssignCharacter></AssignCharacter>}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  count: state.characters.count,\n  currentPage: state.page.current\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers/index';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}