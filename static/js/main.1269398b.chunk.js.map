{"version":3,"sources":["actions/characters.js","reducers/characters.js","actions/players.js","reducers/players.js","service/page-service.js","reducers/page.js","reducers/index.js","actions/page.js","components/playerSetup/playerSetup.js","components/characterSetup/characterSetup.js","components/App/App.js","serviceWorker.js","index.js"],"names":["characterActions","increment","decrement","reset","initialState","characterList","merlin","maxCount","count","percival","servant","mordred","morgana","assassin","oberon","minion","selectedCount","reducer","state","arguments","length","undefined","action","type","actions","Object","objectSpread","characterName","currentCount","defineProperty","add","delete","playerList","name","good","concat","toConsumableArray","player","slice","index","pageMap","playerSetup","characters","current","page","combineReducers","players","change","PlayerSetup","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputEnter","event","key","addPlayer","input","value","props","dispatch","playerActions","preventDefault","startGame","pageActions","React","createRef","react_default","a","createElement","className","ref","onKeyDown","onClick","map","_ref","i","Component","connect","CharacterSetup","increaseCharacter","decreaseCharacter","resetCharacter","backToHome","characterCount","_this2","keys","displayName","toUpperCase","disabled","App","currentPage","playerSetup_playerSetup","characterSetup_characterSetup","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1269398b.chunk.js","sourcesContent":["const characterActions = {\n    increment: 'CHARACTER_INCREMENT',\n    decrement: 'CHARACTER_DECREMENT',\n    reset: 'CHARACTER_RESET'\n}\n\nexport default characterActions;","import actions from '../actions/characters';\n\nconst initialState = {\n    characterList: {\n        merlin: {\n            maxCount: 1,\n            count: 0\n        },\n        percival: {\n            maxCount: 1,\n            count: 0\n        },\n        servant: {\n            maxCount: 5,\n            count: 0\n        },\n        mordred: {\n            maxCount: 1,\n            count: 0\n        },\n        morgana: {\n            maxCount: 1,\n            count: 0\n        },\n        assassin: {\n            maxCount: 1,\n            count: 0\n        },\n        oberon: {\n            maxCount: 1,\n            count: 0\n        },\n        minion: {\n            maxCount: 3,\n            count: 0\n        }\n    },\n    selectedCount: 0\n}\n\n// action = {\n//     type,\n//     characterName\n// }\nconst reducer = (state = initialState, action) => {\n    if (action.type === actions.reset) return {...initialState};\n    if (!(action.characterName in state.characterList)) return state;\n    let currentCount = state.characterList[action.characterName].count;\n    let maxCount = state.characterList[action.characterName].maxCount;\n    switch (action.type) {\n        case actions.increment:\n            return {\n                ...state,\n                characterList: {\n                    ...state.characterList,\n                    [action.characterName]: {\n                        ...state.characterList[action.characterName],\n                        count: maxCount > currentCount ? currentCount + 1 : currentCount\n                    }\n                },\n                selectedCount: maxCount > currentCount ? state.selectedCount + 1 : state.selectedCount\n            }\n        case actions.decrement:\n            return {\n                ...state,\n                characterList: {\n                    ...state.characterList,\n                    [action.characterName]: {\n                        ...state.characterList[action.characterName],\n                        count: currentCount > 0 ? currentCount - 1 : currentCount\n                    }\n                },\n                selectedCount: currentCount > 0 ? state.selectedCount - 1 : state.selectedCount\n            }\n        default:\n            return state; \n    }\n}\n\nexport default reducer;","const actions = {\n    add: 'PLAYER_ADD',\n    delete: 'PLAYER_DELETE'\n}\n\nexport default actions;","import actions from '../actions/players';\n\nconst initialState = {\n    // playerList: []\n    playerList: [\n        {name: 'Alice', good: null},\n        {name: 'Bob', good: null},\n        {name: 'Cathy', good: null},\n        {name: 'Dickson', good: null},\n        {name: 'Evelyn', good: null},\n    ]\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actions.add:\n            return {\n                ...state,\n                playerList: [...state.playerList, {name: action.player, good: null}]\n            };\n        case actions.delete:\n            return {\n                ...state,\n                playerList: state.playerList.slice(action.index, 1)\n            };\n        default:\n            return state; \n    }\n}\n\nexport default reducer;","export const pageMap = {\n    playerSetup: 'playerSetup',\n    characters: 'characters'\n}","import { pageMap } from '../service/page-service';\n\nconst initialState = {\n    // current: pageMap.playerSetup\n    current: pageMap.characters\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'CHANGE_PAGE':\n            if (action.page in pageMap) {\n                return {\n                    ...state,\n                    current: pageMap[action.page]\n                };\n            } else return state;\n        default:\n            return state; \n    }\n}\n\nexport default reducer;","import { combineReducers } from 'redux';\nimport characters from './characters';\nimport players from './players';\nimport page from './page';\n\nexport default combineReducers({\n    characters,\n    players,\n    page\n})","const actions = {\n    change: 'CHANGE_PAGE'\n}\n\nexport default actions;","import React from 'react';\nimport { connect } from 'react-redux';\nimport './playerSetup.scss';\nimport { pageMap } from '../../service/page-service';\nimport playerActions from '../../actions/players';\nimport pageActions from '../../actions/page';\n\nclass PlayerSetup extends React.Component {\n    constructor() {\n        super();\n        this.input = React.createRef();\n    }\n\n    handleInputEnter = (event) => {\n        if (event.key === 'Enter') {\n            this.addPlayer(event);\n        }\n    }\n\n    addPlayer = (event) => {\n        if (this.input && this.input.current && this.input.current.value !== '') {\n            this.props.dispatch({type: playerActions.add, player: this.input.current.value});\n            this.input.current.value = '';\n        }\n        event.preventDefault();\n    }\n\n    startGame = () => {\n        this.props.dispatch({type: pageActions.change, page: pageMap.characters})\n    }\n    \n    render() {\n        return (\n            <div className=\"player-setup\">\n                <div className=\"title\">Please add players</div>\n                <div>\n                    <input type=\"text\" ref={this.input} onKeyDown={this.handleInputEnter}/>\n                    <button className=\"btn common add-player\" onClick={this.addPlayer}>Add player</button>\n                </div>\n                <div className=\"name-section\">{this.props.playerList.map(({name}, i) => \n                    <div className=\"name-item\" key={i}>{`${i+1}. ${name}`}</div>\n                )}</div>\n                { this.props.playerList.length >= 5 && \n                    <button className=\"btn common start-game\" onClick={this.startGame}>Let's Go</button>\n                }\n                { this.props.playerList.length < 5 && \n                    <div className=\"warning\">You need at least five players</div>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList,\n        page: state.page.current\n    }\n};\n\nexport default connect(mapStateToProps)(PlayerSetup);","import React from 'react';\nimport { connect } from 'react-redux';\nimport './characterSetup.scss';\nimport { pageMap } from '../../service/page-service';\nimport characterActions from '../../actions/characters';\nimport pageActions from '../../actions/page';\n\nclass CharacterSetup extends React.Component {\n    constructor() {\n        super();\n        this.characterCount = 0;\n    }\n\n    increaseCharacter = (name) => {\n        this.props.dispatch({type: characterActions.increment, characterName: name});\n    }\n\n    decreaseCharacter = (name) => {\n        this.props.dispatch({type: characterActions.decrement, characterName: name});\n    }\n\n    resetCharacter = () => {\n        this.props.dispatch({type: characterActions.reset});\n    }\n\n    backToHome = () => {\n        this.resetCharacter();\n        this.props.dispatch({type: pageActions.change, page: pageMap.playerSetup});\n    }\n\n    render() {\n        return (\n            <div className=\"character-setup\">\n                <div className=\"character-list\">{Object.keys(this.props.characterList).map((name, i) => {\n                    let displayName = name.toUpperCase();\n                    return (\n                        <div className=\"character-line\" key={i}>\n                            <div className=\"character-name\">{displayName}</div>\n                            <div className=\"control-section\">\n                                <button className=\"btn common minus\"\n                                disabled={this.props.characterList[name].count <= 0}\n                                onClick={() => this.decreaseCharacter(name)}\n                                >-</button>\n                                <div className=\"count\">{this.props.characterList[name].count}</div>\n                                <button className=\"btn common plus\" \n                                disabled={(this.props.characterList[name].count >= this.props.characterList[name].maxCount) || this.props.playerList.length === this.props.selectedCount}\n                                onClick={() => this.increaseCharacter(name)}\n                                >+</button>\n                            </div>\n                        </div>\n                    );\n                })}</div>\n                { this.props.playerList.length - this.props.selectedCount > 0 &&\n                    <div className=\"warning\">{`${this.props.playerList.length - this.props.selectedCount} left to be added`}</div>\n                }\n                { this.props.playerList.length === this.props.selectedCount &&\n                    <div>All set</div>\n                }\n                <div className=\"final-button-section\">\n                    <button className=\"btn clear\" onClick={this.backToHome}>Home</button>\n                    <button className=\"btn clear\" onClick={this.resetCharacter}>Reset</button>\n                    <button className=\"btn common\" disabled={this.props.playerList.length > this.props.selectedCount}>Start</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList,\n        characterList: state.characters.characterList,\n        selectedCount: state.characters.selectedCount,\n        page: state.page.current\n    }\n};\n\nexport default connect(mapStateToProps)(CharacterSetup);","import React from 'react';\nimport { connect } from 'react-redux';\nimport PlayerSetup from '../playerSetup/playerSetup';\nimport CharacterSetup from '../characterSetup/characterSetup';\nimport { pageMap } from '../../service/page-service';\nimport './App.scss';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"title app-title\">Avalon</div>\n        <div className=\"page-content\">\n          {this.props.currentPage === pageMap.playerSetup && <PlayerSetup></PlayerSetup>}\n          {this.props.currentPage === pageMap.characters && <CharacterSetup></CharacterSetup>}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  count: state.characters.count,\n  currentPage: state.page.current\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers/index';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}