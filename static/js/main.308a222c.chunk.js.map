{"version":3,"sources":["reducers/characters.js","reducers/players.js","service/page-service.js","reducers/page.js","reducers/index.js","components/playerSetup/playerSetup.js","components/App/App.js","serviceWorker.js","index.js"],"names":["initialState","count","reducer","state","arguments","length","undefined","type","Object","objectSpread","playerList","action","concat","toConsumableArray","player","slice","index","pageMap","playerSetup","characters","current","page","combineReducers","players","PlayerSetup","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputEnter","event","key","addPlayer","input","value","props","dispatch","preventDefault","startGame","React","createRef","react_default","a","createElement","className","ref","onKeyDown","onClick","map","name","i","Component","connect","App","increment","decrement","currentPage","playerSetup_playerSetup","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.308a222c.chunk.js","sourcesContent":["const initialState = {\n    count: 0\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'INCREMENT':\n            return {\n                ...state,\n                count: state.count + 1\n            };\n        case 'DECREMENT':\n            return {\n                ...state,\n                count: state.count - 1\n            };\n        case 'RESET':\n            return {\n                ...state,\n                count: 0\n            };\n        default:\n            return state; \n    }\n}\n\nexport default reducer;","const initialState = {\n    playerList: []\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'ADD_PLAYER':\n            return {\n                ...state,\n                playerList: [...state.playerList, action.player]\n            };\n        case 'DELETE_PLAYER':\n            return {\n                ...state,\n                playerList: state.playerList.slice(action.index, 1)\n            };\n        default:\n            return state; \n    }\n}\n\nexport default reducer;","export const pageMap = {\n    playerSetup: 'playerSetup',\n    characters: 'characters'\n}","import { pageMap } from '../service/page-service';\n\nconst initialState = {\n    current: pageMap.playerSetup\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'CHANGE_PAGE':\n            if (action.page in pageMap) {\n                return {\n                    ...state,\n                    current: pageMap[action.page]\n                };\n            } else return state;\n        default:\n            return state; \n    }\n}\n\nexport default reducer;","import { combineReducers } from 'redux';\nimport characters from './characters';\nimport players from './players';\nimport page from './page';\n\nexport default combineReducers({\n    characters,\n    players,\n    page\n})","import React from 'react';\nimport { connect } from 'react-redux';\nimport './playerSetup.scss';\nimport { pageMap } from '../../service/page-service';\n\nclass PlayerSetup extends React.Component {\n    constructor() {\n        super();\n        this.input = React.createRef();\n    }\n\n    handleInputEnter = (event) => {\n        if (event.key === 'Enter') {\n            this.addPlayer(event);\n        }\n    }\n\n    addPlayer = (event) => {\n        if (this.input && this.input.current && this.input.current.value !== '') {\n            this.props.dispatch({type: 'ADD_PLAYER', player: this.input.current.value});\n            this.input.current.value = '';\n        }\n        event.preventDefault();\n    }\n\n    startGame = () => {\n        this.props.dispatch({type: 'CHANGE_PAGE', page: pageMap.characters})\n    }\n    \n    render() {\n        return (\n            <div className=\"player-setup\">\n                <div className=\"title\">Please add players</div>\n                <div>\n                    <input type=\"text\" ref={this.input} onKeyDown={this.handleInputEnter}/>\n                    <button className=\"btn add-player\" onClick={this.addPlayer}>Add player</button>\n                </div>\n                <div className=\"name-section\">{this.props.playerList.map((name, i) => <div className=\"name-item\" key={i}>{name}</div>)}</div>\n                <button className=\"btn start-game\" onClick={this.startGame}>Let's Go</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList,\n        page: state.page.current\n    }\n};\n\nexport default connect(mapStateToProps)(PlayerSetup);","import React from 'react';\nimport { connect } from 'react-redux';\nimport PlayerSetup from '../playerSetup/playerSetup';\nimport { pageMap } from '../../service/page-service';\nimport './App.scss';\n\nclass App extends React.Component {\n  increment = () => {\n    this.props.dispatch({ type: \"INCREMENT\" });\n  }\n\n  decrement = () => {\n    this.props.dispatch({ type: \"DECREMENT\" });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"title app-title\">Avalon</div>\n        {this.props.currentPage === pageMap.playerSetup && <PlayerSetup></PlayerSetup>}\n        {this.props.currentPage === pageMap.characters &&\n          <div>\n            <button onClick={this.increment}>+</button>\n            <div>{ this.props.count }</div>\n            <button onClick={this.decrement}>-</button>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  count: state.characters.count,\n  currentPage: state.page.current\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers/index';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}