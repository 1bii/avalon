{"version":3,"sources":["resource/cool/merlin.jpg","resource/cool/percival.jpg","resource/cool/servant.jpg","resource/cool/assassin.jpg","resource/cool/mordred.jpg","resource/cool/morgana.jpg","resource/cool/minion.jpg","resource/cool/oberon.jpg","resource/cool/victory.png","resource/cool/defeat.png","actions/characters.js","service/utils.js","reducers/characters.js","actions/players.js","reducers/players.js","service/page-service.js","reducers/page.js","actions/gameStatus.js","reducers/gameStatus.js","reducers/index.js","actions/page.js","components/playerSetup/playerSetup.js","components/characterSetup/characterSetup.js","components/assignCharacters/assignCharacters.js","components/player-line/player-line.js","components/mission/vote.js","components/mission/mission.js","components/goodGame/goodGame.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","characterActions","increment","decrement","reset","shuffle","array","j","x","i","length","Math","floor","random","initialState","characterList","merlin","maxCount","count","order","percival","servant","mordred","morgana","assassin","oberon","minion","selectedCount","assignableList","reducer","state","arguments","undefined","action","currentCount","type","actions","characterName","Object","objectSpread","defineProperty","newList","keys","forEach","name","Array","fill","push","add","delete","clear","setRole","initialWithData","playerList","concat","toConsumableArray","player","good","slice","index","map","role","data","pageMap","playerSetup","characters","assignCharacters","mission","goodGame","evilRoles","rules","5","roundTeamCount","twoFail","6","7","8","9","10","current","page","stepToNextRound","addSuccess","setLeader","selectPlayer","clearPlayer","endGame","addRejects","round","rejects","successCount","leaderIndex","selectedTeam","Set","gameEnd","newSet","has","combineReducers","players","gameStatus","change","PlayerSetup","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputEnter","event","key","addPlayer","input","value","filter","setState","showDuplicateWarning","setTimeout","showOverflowWarning","dispatch","playerActions","preventDefault","startGame","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","cookies","set","pageActions","stop","clearPlayers","React","createRef","playerListFromCookie","get","react_default","createElement","className","ref","onKeyDown","placeholder","onClick","_ref2","Component","withCookies","connect","CharacterSetup","increaseCharacter","decreaseCharacter","resetCharacter","console","log","isGoodEvilBalanced","_this2","sort","b","displayName","toUpperCase","classNames","evil","disabled","AssignCharacters","onViewClick","observableNamesArray","currentPlayerIndex","indexOf","extraInfo","observableNames","join","reminder","viewMode","onConfirmClick","gameActions","imageMap","require","src","alt","PlayerLine","selected","Vote","isFailValid","playerRole","voters","voterIndex","showInvalidFailWarning","onVoteClick","success","onFinish","failCount","Mission","onPlayerLineClick","currentRound","size","rule","showMemberCountExceedWarning","onChooseTeamConfirm","showMode","getNextLeaderIndex","finishRound","_ref","resultSuccess","_x","apply","onApprove","_callee2","feedback","_context2","selectedTeamList","_x2","onVoteFinish","onResultConfirm","player_line_player_line","mission_vote","GoodGame","selectedMerlin","onMerlinConfirmClick","canKill","victory","backToHome","assassinList","goodGuyList","App","currentPage","playerSetup_playerSetup","characterSetup_characterSetup","assignCharacters_assignCharacters","mission_mission","goodGame_goodGame","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es6","es","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0fb0cab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/merlin.d9a34f22.jpg\";","module.exports = __webpack_public_path__ + \"static/media/percival.9987db5b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/servant.73d1b559.jpg\";","module.exports = __webpack_public_path__ + \"static/media/assassin.e7fdef50.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mordred.017624c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/morgana.cbfd7398.jpg\";","module.exports = __webpack_public_path__ + \"static/media/minion.d8ec044c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/oberon.3b87a760.jpg\";","module.exports = __webpack_public_path__ + \"static/media/victory.cbab7227.png\";","module.exports = __webpack_public_path__ + \"static/media/defeat.b420bfe5.png\";","const characterActions = {\n    increment: 'CHARACTER_INCREMENT',\n    decrement: 'CHARACTER_DECREMENT',\n    reset: 'CHARACTER_RESET',\n    shuffle: 'CHARACTER_SHUFFLE'\n}\n\nexport default characterActions;","// Fisher–Yates shuffle algorithm\nexport function shuffle(array) {\n    let j, x, i;\n    for (i = array.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = array[i];\n        array[i] = array[j];\n        array[j] = x;\n    }\n    return array;\n}","import actions from '../actions/characters';\nimport { shuffle } from '../service/utils';\n\nconst initialState = {\n    characterList: {\n        merlin: {\n            maxCount: 1,\n            count: 0,\n            order: 0\n        },\n        percival: {\n            maxCount: 1,\n            count: 0,\n            order: 1\n        },\n        servant: {\n            maxCount: 5,\n            count: 0,\n            order: 2\n        },\n        mordred: {\n            maxCount: 1,\n            count: 0,\n            order: 3\n        },\n        morgana: {\n            maxCount: 1,\n            count: 0,\n            order: 4\n        },\n        assassin: {\n            maxCount: 1,\n            count: 0,\n            order: 5\n        },\n        oberon: {\n            maxCount: 1,\n            count: 0,\n            order: 6\n        },\n        minion: {\n            maxCount: 3,\n            count: 0,\n            order: 7\n        }\n    },\n    selectedCount: 0,\n    assignableList: []\n}\n\n// action = {\n//     type,\n//     characterName\n// }\nconst reducer = (state = initialState, action) => {\n    let currentCount = 0;\n    let maxCount = 0;\n    switch (action.type) {\n        case actions.increment:\n            currentCount = state.characterList[action.characterName].count;\n            maxCount = state.characterList[action.characterName].maxCount;\n            return {\n                ...state,\n                characterList: {\n                    ...state.characterList,\n                    [action.characterName]: {\n                        ...state.characterList[action.characterName],\n                        count: maxCount > currentCount ? currentCount + 1 : currentCount\n                    }\n                },\n                selectedCount: maxCount > currentCount ? state.selectedCount + 1 : state.selectedCount\n            }\n        case actions.decrement:\n            currentCount = state.characterList[action.characterName].count;\n            maxCount = state.characterList[action.characterName].maxCount;\n            return {\n                ...state,\n                characterList: {\n                    ...state.characterList,\n                    [action.characterName]: {\n                        ...state.characterList[action.characterName],\n                        count: currentCount > 0 ? currentCount - 1 : currentCount\n                    }\n                },\n                selectedCount: currentCount > 0 ? state.selectedCount - 1 : state.selectedCount\n            }\n        case actions.shuffle: // generate a shuffled list of characters to assign, and this list will be fixed during the game\n            let newList = [];\n            Object.keys(state.characterList).forEach(name => {\n                if (state.characterList[name].count) {\n                    Array(state.characterList[name].count).fill().forEach(() =>{\n                        newList.push(name)\n                    });\n                }\n            });\n            return {\n                ...state,\n                assignableList: shuffle(newList)\n            }\n        case actions.reset:\n            return { ...initialState };    \n        default:\n            return state; \n    }\n}\n\nexport default reducer;","const actions = {\n    add: 'PLAYER_ADD',\n    delete: 'PLAYER_DELETE',\n    clear: 'PLAYER_CLEAR',\n    setRole: 'PLAYER_SET_ROLE',\n    shuffle: 'PLAYER_SHUFFLE',\n    initialWithData: 'INITIAL_WITH_DATA'\n}\n\nexport default actions;","import actions from '../actions/players';\nimport { shuffle } from '../service/utils';\n\nconst initialState = {\n    playerList: []\n    // playerList: [\n    //     {name: 'Alice', role: null},\n    //     {name: 'Bob', role: null},\n    //     {name: 'Cathy', role: null},\n    //     {name: 'Dickson', role: null},\n    //     {name: 'Evelyn', role: null},\n    // ]\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actions.add:\n            return {\n                ...state,\n                playerList: [...state.playerList, {name: action.player, good: null}]\n            };\n        case actions.delete:\n            return {\n                ...state,\n                playerList: state.playerList.slice(action.index, 1)\n            };\n        case actions.clear:\n            return {\n                ...state,\n                playerList: []\n            };\n        case actions.setRole:\n            return {\n                ...state,\n                playerList: state.playerList.map((player, i) => ({\n                    ...player,\n                    role: action.assignableList[i]\n                }))\n            }\n        case actions.shuffle:\n            return {\n                ...state,\n                playerList: shuffle(state.playerList)\n            }\n        case actions.initialWithData:\n            return {\n                ...state,\n                playerList: action.data\n            }\n        default:\n            return state; \n    }\n}\n\nexport default reducer;","export const pageMap = {\n    playerSetup: 'playerSetup',\n    characters: 'characters',\n    assignCharacters: 'assignCharacters',\n    mission: 'mission',\n    goodGame: 'goodGame'\n}\n\nexport const evilRoles = ['mordred', 'morgana', 'oberon', 'assassin', 'minion'];\n\n// player count: set up\n// when twoFail is true, we need 2 fails for round[3] (4th round)\nexport const rules = { \n    5: {\n        roundTeamCount: [2, 3, 2, 3, 3],\n        twoFail: false\n    },\n    6: {\n        roundTeamCount: [2, 3, 4, 3, 4],\n        twoFail: false\n    },\n    7: {\n        roundTeamCount: [2, 3, 3, 4, 4],\n        twoFail: true\n    },\n    8: {\n        roundTeamCount: [3, 4, 4, 5, 5],\n        twoFail: true\n    },\n    9: {\n        roundTeamCount: [3, 4, 4, 5, 5],\n        twoFail: true\n    },\n    10: {\n        roundTeamCount: [3, 4, 4, 5, 5],\n        twoFail: true\n    },\n}","import { pageMap } from '../service/page-service';\n\nconst initialState = {\n    current: pageMap.playerSetup\n    // current: pageMap.characters\n    // current: pageMap.assignCharacters\n    // current: pageMap.mission\n    // current: pageMap.goodGame\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'CHANGE_PAGE':\n            if (action.page in pageMap) {\n                return {\n                    ...state,\n                    current: pageMap[action.page]\n                };\n            } else return state;\n        default:\n            return state; \n    }\n}\n\nexport default reducer;","const actions = {\n    stepToNextRound: 'GAME_STATUS_STEP_TO_NEXT_ROUND',\n    addSuccess: 'GAME_STATUS_ADD_SUCCESS',\n    setLeader: 'GAME_STATUS_SET_LEADER',\n    selectPlayer: 'GAME_STATUS_SELECT_PLAYER',\n    clearPlayer: 'GAME_STATUS_CLEAR_PLAYER',\n    endGame: 'GAME_STATUS_END_GAME',\n    addRejects: 'GAME_STATUS_ADD_REJECTS',\n    reset: 'GAME_STATUS_RESET'\n}\n\nexport default actions;","import actions from '../actions/gameStatus';\n\nconst initialState = {\n    round: 0, // 0~4\n    rejects: 0,\n    successCount: 0,\n    leaderIndex: 0, // index in playerList\n    selectedTeam: new Set([]),\n    gameEnd: false\n}\n\nconst reducer = (state = initialState, action) => {\n    let newSet;\n    switch (action.type) {\n        case actions.stepToNextRound:\n            return {\n                ...state,\n                rejects: 0,\n                round: state.round >= 5 ? state.round : state.round + 1,\n                selectedTeam: new Set([])\n            }\n        case actions.addSuccess:\n            return {\n                ...state,\n                successCount: state.successCount + 1\n            }\n        case actions.setLeader:\n            return {\n                ...state,\n                leaderIndex: action.index\n            }\n        case actions.selectPlayer:\n            newSet = new Set(state.selectedTeam);\n            if (newSet.has(action.name)) newSet.delete(action.name);\n            else newSet.add(action.name);\n            return {\n                ...state,\n                selectedTeam: newSet\n            }\n        case actions.clearPlayer:\n            return {\n                ...state,\n                selectedTeam: new Set([])\n            }\n        case actions.endGame:\n            return {\n                ...state,\n                gameEnd: true\n            }\n        case actions.addRejects:\n            return {\n                ...state,\n                rejects: state.rejects + 1\n            }\n        case actions.reset:\n            return { ...initialState }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import { combineReducers } from 'redux';\nimport characters from './characters';\nimport players from './players';\nimport page from './page';\nimport gameStatus from './gameStatus';\n\nexport default combineReducers({\n    characters,\n    players,\n    page,\n    gameStatus\n})","const actions = {\n    change: 'CHANGE_PAGE'\n}\n\nexport default actions;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withCookies } from 'react-cookie';\nimport './playerSetup.scss';\nimport { pageMap } from '../../service/page-service';\nimport playerActions from '../../actions/players';\nimport pageActions from '../../actions/page';\n\nclass PlayerSetup extends React.Component {\n    constructor(props) {\n        super(props);\n        const { cookies } = this.props;\n        this.input = React.createRef();\n        this.state = {\n            showDuplicateWarning: false,\n            showOverflowWarning: false\n        }\n        let playerListFromCookie = cookies.get('avalonPlayerList');\n        if (playerListFromCookie) {\n            this.props.dispatch({type: playerActions.initialWithData, data: playerListFromCookie});\n        }\n    }\n\n    handleInputEnter = (event) => {\n        if (event.key === 'Enter') {\n            this.addPlayer(event);\n        }\n    }\n\n    addPlayer = (event) => {\n        if (this.input && this.input.current && this.input.current.value !== '') {\n            // check duplicate name\n            if (this.props.playerList.filter(player => player.name === this.input.current.value).length > 0) {\n                this.setState({\n                    ...this.state,\n                    showDuplicateWarning: true\n                });\n                setTimeout(() => {\n                    this.setState({\n                        ...this.state,\n                        showDuplicateWarning: false\n                    });\n                }, 3000);\n                return;\n            }\n            // check overflow\n            if (this.props.playerList.length >= 10) {\n                this.setState({\n                    ...this.state,\n                    showOverflowWarning: true\n                });\n                setTimeout(() => {\n                    this.setState({\n                        ...this.state,\n                        showOverflowWarning: false\n                    });\n                }, 3000);\n                return;\n            }\n            this.props.dispatch({type: playerActions.add, player: this.input.current.value});\n            this.input.current.value = '';\n        }\n        event.preventDefault();\n    }\n\n    startGame = async () => {\n        // await this.props.dispatch({type: playerActions.shuffle});\n        this.props.cookies.set('avalonPlayerList', this.props.playerList);\n        this.props.dispatch({type: pageActions.change, page: pageMap.characters});\n    }\n    clearPlayers = () => {\n        this.props.cookies.set('avalonPlayerList', []);\n        this.props.dispatch({type: playerActions.clear});\n    }\n    \n    render() {\n        return (\n            <div className=\"player-setup\">\n                <div className=\"title\">Please add players</div>\n                <div className=\"input-section\">\n                    <input type=\"text\" ref={this.input} onKeyDown={this.handleInputEnter} placeholder=\"Ex: Alex\"/>\n                    <button className=\"btn common add-player\" onClick={this.addPlayer}>Add</button>\n                </div>\n                <div className=\"name-section\">{this.props.playerList.map(({name}, i) => \n                    <div className=\"name-item\" key={i}>{`${i+1}. ${name}`}</div>\n                )}</div>\n                <div className=\"button-section\">\n                    { this.props.playerList.length > 0 && \n                        <button className=\"btn clear\" onClick={this.clearPlayers}>Clear</button>\n                    }\n                    { this.props.playerList.length >= 5 && \n                        <button className=\"btn common start-game\" onClick={this.startGame}>Let's Go</button>\n                    }\n                </div>\n                { this.props.playerList.length < 5 && \n                    <div className=\"warning\">\n                        <i className=\"far fa-hand-point-right\"></i>\n                        <div>You need at least five players</div>\n                    </div>\n                }\n                { this.state.showOverflowWarning && \n                    <div className=\"warning\">\n                        <i className=\"far fa-hand-point-right\"></i>\n                        <div>Players number exceeded!</div>\n                    </div>\n                }\n                { this.state.showDuplicateWarning && \n                    <div className=\"warning\">\n                        <i className=\"far fa-hand-point-right\"></i>\n                        <div>Name existed!</div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList\n    }\n};\n\nexport default withCookies(connect(mapStateToProps)(PlayerSetup));","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport './characterSetup.scss';\nimport { pageMap } from '../../service/page-service';\nimport characterActions from '../../actions/characters';\nimport pageActions from '../../actions/page';\nimport playerActions from '../../actions/players';\n\nclass CharacterSetup extends React.Component {\n    increaseCharacter = (name) => {\n        this.props.dispatch({type: characterActions.increment, characterName: name});\n    }\n\n    decreaseCharacter = (name) => {\n        this.props.dispatch({type: characterActions.decrement, characterName: name});\n    }\n\n    resetCharacter = () => {\n        this.props.dispatch({type: characterActions.reset});\n    }\n\n    startGame = async () => {\n        await this.props.dispatch({type: characterActions.shuffle});\n        console.log(this.props.assignableList);\n        await this.props.dispatch({type: playerActions.setRole, assignableList: this.props.assignableList});\n        console.log(this.props.playerList);\n        this.props.dispatch({type: pageActions.change, page: pageMap.assignCharacters});\n    }\n\n    isGoodEvilBalanced = () => {\n        return (Object.keys(this.props.characterList).filter(name => this.props.characterList[name].order > 2 && this.props.characterList[name].count > 0).length > 0)\n        && (Object.keys(this.props.characterList).filter(name => this.props.characterList[name].order <= 2 && this.props.characterList[name].count > 0).length > 0);\n    }\n\n    render() {\n        return (\n            <div className=\"character-setup\">\n                <div className=\"character-list\">{Object.keys(this.props.characterList)\n                    .sort((a, b) => this.props.characterList[a].order - this.props.characterList[b].order)\n                    .map((name, i) => {\n                    let displayName = name.toUpperCase();\n                    return (\n                        <div className=\"character-line\" key={i}>\n                            <div className={classNames(\"character-name\", {'evil': this.props.characterList[name].order > 2})}>{displayName}</div>\n                            <div className=\"control-section\">\n                                <button className=\"btn common minus\"\n                                disabled={this.props.characterList[name].count <= 0}\n                                onClick={() => this.decreaseCharacter(name)}\n                                >-</button>\n                                <div className=\"count\">{this.props.characterList[name].count}</div>\n                                <button className=\"btn common plus\" \n                                disabled={(this.props.characterList[name].count >= this.props.characterList[name].maxCount) || this.props.playerList.length === this.props.selectedCount}\n                                onClick={() => this.increaseCharacter(name)}\n                                >+</button>\n                            </div>\n                        </div>\n                    );\n                })}</div>\n                <div className=\"message-to-user\">\n                    { this.props.playerList.length - this.props.selectedCount > 0 &&\n                        <div className=\"message-line warning\">\n                            <i className=\"far fa-hand-point-right\"></i>\n                            <div>{`${this.props.playerList.length - this.props.selectedCount} left to be added`}</div>\n                        </div>\n                    }\n                    { !this.isGoodEvilBalanced() &&\n                        <div className=\"message-line warning\">\n                            <i className=\"far fa-hand-point-right\"></i>\n                            <div>Must have at least 1 player in each team</div>\n                        </div>\n                    }\n                    { this.props.playerList.length === this.props.selectedCount && this.isGoodEvilBalanced() &&\n                        <div className=\"message-line all-set\">\n                            <i className=\"fas fa-check\"></i>\n                            <div>All set</div>\n                        </div>\n                    }\n                </div>\n                <div className=\"final-button-section\">\n                    <button className=\"btn clear\" onClick={this.resetCharacter}>Reset</button>\n                    <button className=\"btn common\" onClick={this.startGame} disabled={this.props.playerList.length > this.props.selectedCount || !this.isGoodEvilBalanced()}>Start</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList,\n        characterList: state.characters.characterList,\n        selectedCount: state.characters.selectedCount,\n        assignableList: state.characters.assignableList\n    }\n};\n\nexport default connect(mapStateToProps)(CharacterSetup);","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport './assignCharacters.scss';\nimport { pageMap, evilRoles } from '../../service/page-service';\nimport pageActions from '../../actions/page';\nimport gameActions from '../../actions/gameStatus';\n\nclass AssignCharacters extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPlayerIndex: 0,\n            viewMode: 'preview', // preview, viewing\n            extraInfo: '',\n            observableNames: '',\n            reminder: ''\n        }\n        this.imageMap = {\n            merlin: require('../../resource/cool/merlin.jpg'),\n            percival: require('../../resource/cool/percival.jpg'),\n            servant: require('../../resource/cool/servant.jpg'),\n            assassin: require('../../resource/cool/assassin.jpg'),\n            mordred: require('../../resource/cool/mordred.jpg'),\n            morgana: require('../../resource/cool/morgana.jpg'),\n            minion: require('../../resource/cool/minion.jpg'),\n            oberon: require('../../resource/cool/oberon.jpg')\n        }\n    }\n\n    onViewClick = () => {\n        let observableNamesArray = []\n        switch (this.props.playerList[this.state.currentPlayerIndex].role) {\n            case 'merlin':\n                observableNamesArray = this.props.playerList\n                    .filter(player => evilRoles.filter(role => role !== 'mordred').indexOf(player.role) >= 0)\n                    .map(player => player.name);\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >= 2 ? 'People holding evil roles are' : \n                        observableNamesArray.length === 1 ? 'Person holding evil role is' : \"You can't see anyone\",\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: this.props.playerList.filter(player => player.role === 'mordred').length > 0 ?\n                        'Mordred is hiding!' : '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'percival':\n                observableNamesArray = this.props.playerList\n                    .filter(player => ['morgana', 'merlin'].indexOf(player.role) >= 0)\n                    .map(player => player.name);\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >= 2 ? 'Possible Merlins are' : \n                        observableNamesArray.length === 1 ? 'Merlin is possibly' : \"You can't see anyone\",\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'mordred':\n                observableNamesArray = this.props.playerList\n                    .filter(player => evilRoles.indexOf(player.role) >= 0)\n                    .filter(player => player.name !== this.props.playerList[this.state.currentPlayerIndex].name)\n                    .map(player => player.name)\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >=2 ? 'Your teammates are' :\n                        observableNamesArray.length === 1 ? 'Your teammate is' : 'Your are the only one in your team',\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: this.props.playerList.filter(player => player.role === 'oberon').length > 0 ?\n                        'Oberon is hiding!' : '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'morgana':\n                observableNamesArray = this.props.playerList\n                    .filter(player => evilRoles.indexOf(player.role) >= 0)\n                    .filter(player => player.name !== this.props.playerList[this.state.currentPlayerIndex].name)\n                    .map(player => player.name)\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >=2 ? 'Your teammates are' :\n                        observableNamesArray.length === 1 ? 'Your teammate is' : 'Your are the only one in your team',\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: this.props.playerList.filter(player => player.role === 'oberon').length > 0 ?\n                        'Oberon is hiding!' : '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'assassin':\n                observableNamesArray = this.props.playerList\n                    .filter(player => evilRoles.indexOf(player.role) >= 0)\n                    .filter(player => player.name !== this.props.playerList[this.state.currentPlayerIndex].name)\n                    .map(player => player.name)\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >=2 ? 'Your teammates are' :\n                        observableNamesArray.length === 1 ? 'Your teammate is' : 'Your are the only one in your team',\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: this.props.playerList.filter(player => player.role === 'oberon').length > 0 ?\n                        'Oberon is hiding!' : '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'minion':\n                observableNamesArray = this.props.playerList\n                    .filter(player => evilRoles.indexOf(player.role) >= 0)\n                    .filter(player => player.name !== this.props.playerList[this.state.currentPlayerIndex].name)\n                    .map(player => player.name)\n                this.setState({\n                    ...this.state,\n                    extraInfo: observableNamesArray.length >=2 ? 'Your teammates are' :\n                        observableNamesArray.length === 1 ? 'Your teammate is' : 'Your are the only one in your team',\n                    observableNames: observableNamesArray.join(', '),\n                    reminder: this.props.playerList.filter(player => player.role === 'oberon').length > 0 ?\n                        'Oberon is hiding!' : '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'oberon':\n                this.setState({\n                    ...this.state,\n                    extraInfo: '',\n                    observableNames: '',\n                    reminder: '',\n                    viewMode: 'viewing'\n                });\n                break;\n            case 'servant':\n                this.setState({\n                    ...this.state,\n                    extraInfo: '',\n                    observableNames: '',\n                    reminder: '',\n                    viewMode: 'viewing',\n                });\n                break;\n            default:\n                return;\n        }\n    }\n\n    onConfirmClick = async () => {\n        if (this.state.currentPlayerIndex === this.props.playerList.length - 1) {\n            await this.props.dispatch({type: gameActions.setLeader, index: Math.floor(Math.random() * this.props.playerList.length)});\n            this.props.dispatch({type: pageActions.change, page: pageMap.mission});\n        }\n        this.setState({\n            ...this.state,\n            currentPlayerIndex: this.state.currentPlayerIndex + 1,\n            viewMode: 'preview'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"assign-characters\">\n                <div className=\"player-name\">{this.props.playerList[this.state.currentPlayerIndex].name}</div>\n                { this.state.viewMode === 'preview' && \n                    <div className=\"interaction-block preview-role\">\n                        <div className=\"message\">Click the button below to view your role</div>\n                        <button className=\"btn common\" onClick={this.onViewClick}>View</button>\n                    </div>\n                }\n                { this.state.viewMode === 'viewing' && \n                    <div className=\"interaction-block viewing\">\n                        <div className=\"message\">You are</div>\n                        <div className={classNames(\"role\", \n                            {'evil': ['mordred', 'morgana', 'oberon', 'assassin', 'minion'].indexOf(this.props.playerList[this.state.currentPlayerIndex].role) >= 0})}>\n                            {this.props.playerList[this.state.currentPlayerIndex].role.toUpperCase()}</div>\n                        <img src={this.imageMap[this.props.playerList[this.state.currentPlayerIndex].role]} alt={this.props.playerList[this.state.currentPlayerIndex].role + 'image'}></img>\n                        {this.state.extraInfo && <div className=\"extra-info\">{this.state.extraInfo}</div>}\n                        {this.state.observableNames && <div className=\"name-list\">{this.state.observableNames}</div>}\n                        {this.state.reminder && \n                            <div className=\"warning\">\n                                <i className=\"far fa-hand-point-right\"></i>\n                                <div>{this.state.reminder}</div>\n                            </div>\n                        }\n                        <button className=\"btn common\" onClick={this.onConfirmClick}>Got it</button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList\n    }\n};\n\nexport default connect(mapStateToProps)(AssignCharacters);","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport './player-line.scss';\n\nclass PlayerLine extends React.Component {\n    // props: name, selected, onClick\n\n    render() {\n        return (\n            <div className={classNames('player-line', {'selected': this.props.selected})} \n                onClick={() => this.props.onClick(this.props.name)}>\n                {this.props.gameStatus.selectedTeam.has(this.props.name) &&\n                    <i className=\"far fa-check-circle\"></i>\n                }\n                <div>{this.props.name}</div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        gameStatus: state.gameStatus\n    }\n};\n\nexport default connect(mapStateToProps)(PlayerLine);","import React from 'react';\nimport { connect } from 'react-redux';\nimport './vote.scss';\nimport { evilRoles } from '../../service/page-service';\n\nclass Vote extends React.Component {\n    constructor(props) {\n        super(props); // voters, onFinish(failCount)\n        this.state = {\n            showInvalidFailWarning: false,\n            voterIndex: 0,\n            failCount: 0\n        }\n    }\n\n    isFailValid = () => {\n        let playerRole = this.props.playerList.filter(player => player.name === this.props.voters[this.state.voterIndex])[0].role;\n        if (evilRoles.indexOf(playerRole) < 0) {\n            // can not vote for fail\n            this.setState({\n                ...this.state,\n                showInvalidFailWarning: true\n            });\n            setTimeout(() => {\n                this.setState({\n                    ...this.state,\n                    showInvalidFailWarning: false\n                });\n            }, 3000);\n            return false;\n        }\n        return true;\n    }\n\n    onVoteClick = (success) => {\n        // if is the last one\n        if (this.state.voterIndex === this.props.voters.length - 1) {\n            if (success) this.props.onFinish(this.state.failCount);\n            else if (this.isFailValid()) this.props.onFinish(this.state.failCount + 1);\n            else return;\n            // clear state\n            return this.setState({\n                ...this.state,\n                showInvalidFailWarning: false,\n                voterIndex: 0,\n                failCount: 0\n            });\n        }\n        // keep moving on\n        if (success) {\n            this.setState({\n                ...this.state,\n                showInvalidFailWarning: false,\n                voterIndex: this.state.voterIndex + 1\n            });\n        } else if (this.isFailValid()) {\n            this.setState({\n                ...this.state,\n                showInvalidFailWarning: false,\n                voterIndex: this.state.voterIndex + 1,\n                failCount: this.state.failCount + 1\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"vote-page\">\n                <div className=\"player-name\">{this.props.voters[this.state.voterIndex]}</div>\n                <div className=\"message\">Please vote</div>\n                <div className=\"button-section\">\n                    <button className=\"btn success\" onClick={() => this.onVoteClick(true)}>Success</button>\n                    <button className=\"btn fail\" onClick={() => this.onVoteClick(false)}>Fail</button>\n                </div>\n                {this.state.showInvalidFailWarning && \n                    <div className=\"warning\">\n                        <i className=\"far fa-hand-point-right\"></i>\n                        <div>Justice will never fail</div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        gameStatus: state.gameStatus,\n        playerList: state.players.playerList\n    }\n};\n\nexport default connect(mapStateToProps)(Vote);","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport './mission.scss';\nimport PlayerLine from '../player-line/player-line';\nimport Vote from './vote';\nimport { pageMap, rules } from '../../service/page-service';\nimport pageActions from '../../actions/page';\nimport gameActions from '../../actions/gameStatus';\n\nclass Mission extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showMode: 'choose', // choose, approve, vote, result\n            rule: rules[this.props.playerList.length],\n            resultSuccess: true, // true: show success in result page, false: show fail\n            showMemberCountExceedWarning: false,\n\n            // for voting\n            selectedTeamList: [],\n\n            // for result\n            failCount: 0\n        }\n    }\n\n    onPlayerLineClick = (name) => {\n        // check if reached team limit\n        let currentRound = this.props.gameStatus.round;\n        if (this.props.gameStatus.selectedTeam.size >= this.state.rule.roundTeamCount[currentRound] &&\n            !this.props.gameStatus.selectedTeam.has(name)) {\n            this.setState({\n                ...this.state,\n                showMemberCountExceedWarning: true\n            });\n            setTimeout(() => {\n                this.setState({\n                    ...this.state,\n                    showMemberCountExceedWarning: false\n                });\n            }, 3000);\n            return;\n        }\n        // ok to add\n        this.setState({\n            ...this.state,\n            showMemberCountExceedWarning: false\n        });\n        this.props.dispatch({type: gameActions.selectPlayer, name: name});\n    }\n\n    onChooseTeamConfirm = () => {\n        this.setState({\n            ...this.state,\n            showMode: 'approve'\n        });\n    }\n\n    getNextLeaderIndex = () => {\n        return this.props.gameStatus.leaderIndex === this.props.playerList.length - 1 ?\n            0 : this.props.gameStatus.leaderIndex + 1\n    }\n\n    finishRound = async (success) => {\n        if (success) await this.props.dispatch({type: gameActions.addSuccess});\n        // check if reaches the end of the game\n        if (this.props.gameStatus.round === 4 || this.props.gameStatus.successCount === 3) {\n            // end the game\n            this.props.dispatch({type: gameActions.endGame});\n            this.props.dispatch({type: pageActions.change, page: pageMap.goodGame});\n        } else {\n            // step to next round\n            await this.props.dispatch({type: gameActions.stepToNextRound});\n            if (this.props.gameStatus.round - this.props.gameStatus.successCount === 3) {\n                // fail 3 times, end the game\n                this.props.dispatch({type: gameActions.endGame});\n                this.props.dispatch({type: pageActions.change, page: pageMap.goodGame});\n            }\n            this.setState({\n                ...this.state,\n                showMode: 'result',\n                resultSuccess: success\n            });\n        }\n    }\n\n    onApprove = async (feedback) => {\n        if (feedback) {\n            this.setState({\n                ...this.state,\n                showMode: 'vote',\n                selectedTeamList: [...this.props.gameStatus.selectedTeam]\n            });\n            await this.props.dispatch({type: gameActions.setLeader, index: this.getNextLeaderIndex()});\n            await this.props.dispatch({type: gameActions.clearPlayer});\n        } else { // disapprove\n            // check if reaches 5 rejects\n            if (this.props.gameStatus.rejects === 4) {\n                // fail\n                this.finishRound(false);\n            } else {\n                // add rejects\n                await this.props.dispatch({type: gameActions.clearPlayer});\n                await this.props.dispatch({type: gameActions.addRejects});\n                await this.props.dispatch({type: gameActions.setLeader, index: this.getNextLeaderIndex()});\n                this.setState({\n                    ...this.state,\n                    showMode: 'choose'\n                });\n            }\n        }\n    }\n\n    onVoteFinish = (failCount) => {\n        this.setState({\n            ...this.state,\n            failCount: failCount\n        });\n        if ((this.props.gameStatus.round === 3 && this.state.rule.twoFail && failCount >= 2) || (failCount > 0)) {\n            this.finishRound(false);\n        } else {\n            this.finishRound(true);\n        }\n    }\n\n    onResultConfirm = () => {\n        this.setState({\n            ...this.state,\n            showMode: 'choose',\n            resultSuccess: true,\n            showMemberCountExceedWarning: false,\n            selectedTeamList: [],\n            failCount: 0\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"mission-page\">\n                <div className=\"current-status\">\n                    <i className=\"fas fa-chess-rook\"></i>\n                    <div>:</div>\n                    <div className=\"number\">{this.props.gameStatus.round + 1}</div>\n                    <i className=\"far fa-thumbs-down\"></i>\n                    <div>:</div>\n                    <div className=\"number\">{this.props.gameStatus.rejects}</div>\n                    <i className=\"fas fa-heart\"></i>\n                    <div>:</div>\n                    <div className=\"number blue\">{this.props.gameStatus.successCount}</div>\n                    <i className=\"fas fa-heart-broken\"></i>\n                    <div>:</div>\n                    <div className=\"number red\">{this.props.gameStatus.round - this.props.gameStatus.successCount}</div>\n                </div>\n                {this.state.showMode === 'choose' &&\n                    <div className=\"choose-team\">\n                        <div className=\"player-name\">{this.props.playerList[this.props.gameStatus.leaderIndex].name}</div>\n                        <div className=\"message\">Please choose your team</div>\n                        <div className=\"message small\">{`(${this.state.rule.roundTeamCount[this.props.gameStatus.round]} members)`}</div>\n                        {this.props.playerList.map((player, i) => \n                            <PlayerLine key={i} name={player.name} selected={this.props.gameStatus.selectedTeam.has(player.name)} onClick={(name) => this.onPlayerLineClick(name)}></PlayerLine>\n                        )}\n                        { this.state.showMemberCountExceedWarning && \n                            <div className=\"warning\">\n                                <i className=\"far fa-hand-point-right\"></i>\n                                <div>You can't pick more</div>\n                            </div>\n                        }\n                        <button className=\"btn common\" \n                            disabled={this.props.gameStatus.selectedTeam.size < this.state.rule.roundTeamCount[this.props.gameStatus.round]}\n                            onClick={this.onChooseTeamConfirm}>Go</button>\n                    </div>\n                }\n                {this.state.showMode === 'approve' && \n                    <div className=\"approve-page\">\n                        <div>Does everyone agree with this team?</div>\n                        <button className=\"btn common\" onClick={() => this.onApprove(true)}>Yes</button>\n                        <button className=\"btn clear\" onClick={() => this.onApprove(false)}>No</button>\n                    </div>\n                }\n                {this.state.showMode === 'vote' &&\n                    <Vote voters={this.state.selectedTeamList} onFinish={this.onVoteFinish}></Vote>\n                }\n                {this.state.showMode === 'result' && \n                    <div className=\"result-page\">\n                        <div className={classNames('result', {'success': this.state.resultSuccess})}>\n                            {`${this.state.resultSuccess ? 'SUCCESS' : 'FAIL'}`}\n                        </div>\n                        {(this.state.selectedTeamList.length - this.state.failCount) > 0 && <div className=\"show-vote-block\">\n                            {Array(this.state.selectedTeamList.length - this.state.failCount).fill().map(() => {\n                                return <div className=\"votes success\">\n                                    <i className=\"fas fa-check-circle\"></i>\n                                </div>\n                            })}\n                        </div>}\n                        {(this.state.failCount > 0) && <div className=\"show-vote-block\">\n                            {Array(this.state.failCount).fill().map(() => {\n                                return <div className=\"votes fail\">\n                                    <i className=\"fas fa-times-circle\"></i>\n                                </div>\n                            })}\n                        </div>}\n                        <button className=\"btn common\" onClick={this.onResultConfirm}>OK</button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList,\n        gameStatus: state.gameStatus\n    }\n};\n\nexport default connect(mapStateToProps)(Mission);","import React from 'react';\nimport { connect } from 'react-redux';\nimport './goodGame.scss';\nimport PlayerLine from '../player-line/player-line';\nimport { pageMap, evilRoles } from '../../service/page-service';\nimport pageActions from '../../actions/page';\nimport gameActions from '../../actions/gameStatus';\n\nclass GoodGame extends React.Component {\n    constructor(props) {\n        super(props);\n        let assassinList = this.props.playerList.filter(player => player.role === 'assassin');\n        this.state = {\n            canKill: this.props.gameStatus.successCount === 3 && \n                this.props.playerList.filter(player => player.role === 'merlin').length > 0 &&\n                assassinList.length > 0,\n            victory: this.props.gameStatus.successCount >= 3,\n            assassin: assassinList.length > 0 && assassinList[0].name,\n            goodGuyList: this.props.playerList.filter(player => evilRoles.indexOf(player.role) < 0),\n            selectedMerlin: null\n        }\n    }\n\n    onPlayerLineClick = (name) => {\n        this.setState({\n            ...this.state,\n            selectedMerlin: name\n        });\n    }\n\n    onMerlinConfirmClick = () => {\n        this.setState({\n            ...this.state,\n            canKill: false,\n            victory: this.state.selectedMerlin !== this.props.playerList.filter(player => player.role === 'merlin')[0].name\n        });\n    }\n\n    backToHome = async () => {\n        await this.props.dispatch({type: gameActions.reset});\n        this.props.dispatch({type: pageActions.change, page: pageMap.playerSetup});\n    }\n\n    render() {\n        return (\n            <div className=\"good-game\">\n                {  this.state.canKill &&\n                    <div className=\"kill-merlin\">\n                        <div className=\"player-name\">{this.state.assassin}</div>\n                        <div>Assassinate Merlin</div>\n                        <div className=\"player-list-section\">\n                            {this.state.goodGuyList.map(({name}, i) => \n                                <PlayerLine key={i} name={name} selected={name === this.state.selectedMerlin} onClick={(name) => this.onPlayerLineClick(name)}></PlayerLine>\n                            )}\n                        </div>\n                        <button className=\"btn common\" onClick={this.onMerlinConfirmClick}>Confirm</button>\n                    </div>\n                }\n                { (!this.state.canKill && this.state.victory) &&\n                    <div className=\"game-end\">\n                        <img src={require('../../resource/cool/victory.png')} alt=\"victory\"></img>\n                        <div className=\"message\">Good wins</div>\n                        <button className=\"btn common\" onClick={this.backToHome}>Home</button>\n                    </div>\n                }\n                { (!this.state.canKill && !this.state.victory) &&\n                    <div className=\"game-end\">\n                        <img src={require('../../resource/cool/defeat.png')} alt=\"defeat\"></img>\n                        <div className=\"message\">Evil wins</div>\n                        <button className=\"btn common\" onClick={this.backToHome}>Home</button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        playerList: state.players.playerList,\n        gameStatus: state.gameStatus\n    }\n};\n\nexport default connect(mapStateToProps)(GoodGame);","import React from 'react';\nimport { connect } from 'react-redux';\nimport pageActions from '../../actions/page';\nimport gameActions from '../../actions/gameStatus';\nimport PlayerSetup from '../playerSetup/playerSetup';\nimport CharacterSetup from '../characterSetup/characterSetup';\nimport AssignCharacter from '../assignCharacters/assignCharacters';\nimport Mission from '../mission/mission';\nimport GoodGame from '../goodGame/goodGame';\nimport { pageMap } from '../../service/page-service';\nimport './App.scss';\n\nclass App extends React.Component {\n  backToHome = async () => {\n    await this.props.dispatch({type: gameActions.reset});\n    this.props.dispatch({type: pageActions.change, page: pageMap.playerSetup});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"title-section\">\n          <div className=\"title app-title\">Avalon</div>\n          {this.props.currentPage !== pageMap.playerSetup && <i className=\"fas fa-home\" onClick={this.backToHome}></i>}\n        </div>\n        <div className=\"page-content\">\n          {this.props.currentPage === pageMap.playerSetup && <PlayerSetup></PlayerSetup>}\n          {this.props.currentPage === pageMap.characters && <CharacterSetup></CharacterSetup>}\n          {this.props.currentPage === pageMap.assignCharacters && <AssignCharacter></AssignCharacter>}\n          {this.props.currentPage === pageMap.mission && <Mission></Mission>}\n          {this.props.currentPage === pageMap.goodGame && <GoodGame></GoodGame>}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  count: state.characters.count,\n  currentPage: state.page.current\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers/index';\nimport { CookiesProvider } from 'react-cookie';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <CookiesProvider>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </CookiesProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}